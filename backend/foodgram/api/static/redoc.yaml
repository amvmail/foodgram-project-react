openapi: 3.0.2
info:
  title: 'Foodgram API'
  version: ''
  description: |
    запросы к API начинаются с `/api/`
    # Описание
    Проект **Foodgram** используется для размещения рецептов.
    # Алгоритм регистрации пользователей
    1. Пользователь отправляет POST-запрос на добавление нового пользователя с параметрами `email` и `username` на эндпоинт `/api/users/`.
    2. Пользователь отправляет POST-запрос для получения сообщения с кодом подтверждения с параметрами `email` и `username` на эндпоинт `/api/auth/signup/`.
       **Foodgram** отправляет письмо с кодом подтверждения (`confirmation_code`) на адрес  `email`.
    3. Пользователь отправляет POST-запрос с параметрами `username` и `confirmation_code` на эндпоинт `/api/auth/token/`, в ответе на запрос ему приходит `token` (JWT-токен).
    4. При желании пользователь отправляет PATCH-запрос на эндпоинт `/api/users/me/` и заполняет поля в своём профайле (описание полей — в документации).
    # Пользовательские роли
    - **Аноним** — может просматривать описания произведений, читать отзывы и комментарии.
    - **Аутентифицированный пользователь** (`user`) — может, как и **Аноним**, читать всё, дополнительно он может публиковать отзывы и ставить оценку произведениям (фильмам/книгам/песенкам), может комментировать чужие отзывы; может редактировать и удалять **свои** отзывы и комментарии. Эта роль присваивается по умолчанию каждому новому пользователю.
    - **Администратор** (`admin`) — полные права на управление всем контентом проекта. Может создавать и удалять произведения, категории и жанры. Может назначать роли пользователям. 
    - **Суперюзер Django** — обладет правами администратора (`admin`)
servers:
  - url: /api/

tags:
  - name: AUTH
    description: Регистрация пользователей и выдача токенов
  - name: USERS
    description: Пользователи
  - name: RECIPES
    description: Просмотр всех рецептов
  - name: TAGS
    description: Просмотр всех тегов
  - name: INGREDIENTS
    description: Просмотр всех ингредиентов

paths:
  /auth/signup/:
    post:
      tags:
        - AUTH
      operationId: Регистрация нового пользователя
      description: |
        Получить код подтверждения на переданный `email`.
        Права доступа: **Доступно без токена.**
        Использовать имя 'me' в качестве `username` запрещено.
        Поля `email` и `username` должны быть уникальными.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - username
                - first_name
                - last_name
              properties:
                email:
                  type: string
                username:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  email:
                    type: string
                  username:
                    type: string
                required:
                - email
                - username
          description: 'Удачное выполнение запроса'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: 'Отсутствует обязательное поле или оно некорректно'
  /auth/token/:
    post:
      tags:
        - AUTH
      operationId: Получение JWT-токена
      description: |
        Получение JWT-токена в обмен на username и confirmation code.
        Права доступа: **Доступно без токена.**
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - confirmation_code
              properties:
                username:
                  type: string
                confirmation_code:
                  type: string
                  writeOnly: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: 'Удачное выполнение запроса'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: 'Отсутствует обязательное поле или оно некорректно'
        404:
          description: Пользователь не найден

  /recipes/:
    get:
      tags:
        - RECIPES
      operationId: Получение списка всех рецептов
      description: |
        Получить список всех рецептов
        Права доступа: **Доступно без токена**
      parameters:
      - name: search
        in: query
        description: Поиск по названию
        schema:
          type: string
      responses:
        200:
          description: Удачное выполнение запроса
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Category'
    post:
      tags:
        - RECIPES
      operationId: Добавление новой категории
      description: |
        Создать категорию.
        Права доступа: **Авторизованный пользователь или Администратор.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        201:
          description: Удачное выполнение запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: 'Отсутствует обязательное поле или оно некорректно'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Необходим JWT-токен
        403:
          description: Нет прав доступа
      security:
      - jwt-token:
        - write:admin
  /categories/{slug}/:
    delete:
      tags:
        - RECIPES
      operationId: Удаление категории
      description: |
        Удалить категорию.
        Права доступа: **Администратор.**
      parameters:
      - name: slug
        in: path
        required: true
        description: Slug категории
        schema:
          type: string
      responses:
        204:
          description: 'Удачное выполнение запроса'
        401:
          description: Необходим JWT-токен
        403:
          description: Нет прав доступа
        404:
          description: Категория не найдена
      security:
      - jwt-token:
        - write:admin

  /genres/:
    get:
      tags:
        - TAG
      operationId: Получение списка всех тегов
      description: |
        Получить список всех тегов.
        Права доступа: **Доступно без токена**
      parameters:
      - name: search
        in: query
        description: Поиск по названию тега
        schema:
          type: string
      responses:
        200:
          description: Удачное выполнение запроса
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Tags'
    post:
      tags:
        - TAGS
      operationId: Добавление тега
      description: |
        Добавить тег.
        Права доступа: **Авторизованный пользователь или Администратор**.
        Поле `name` каждого тега должно быть уникальным.
      responses:
        201:
          description: Удачное выполнение запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
        400:
          description: 'Отсутствует обязательное поле или оно некорректно'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Необходим JWT-токен
        403:
          description: Нет прав доступа
      security:
      - jwt-token:
        - write:admin

  /genres/{slug}/:
    delete:
      tags:
        - TAGS
      operationId: Удаление тега
      description: |
        Удалить тег.
        Права доступа: **Администратор**.
      parameters:
      - name: name
        in: path
        required: true
        description: name тега
        schema:
          type: string
      responses:
        204:
          description: 'Удачное выполнение запроса'
        401:
          description: Необходим JWT-токен
        403:
          description: Нет прав доступа
        404:
          description: Жанр не найден
      security:
      - jwt-token:
        - write:admin

  /titles/:
    get:
      tags:
        - INGREDIENT
      operationId: Получение списка всех произведений
      description: |
        Получить список всех объектов.
        Права доступа: **Доступно без токена**
      parameters:
        - name: category
          in: query
          description: фильтрует по полю slug категории
          schema:
            type: string
        - name: genre
          in: query
          description: фильтрует по полю slug жанра
          schema:
            type: string
        - name: name
          in: query
          description: фильтрует по названию произведения
          schema:
            type: string
        - name: year
          in: query
          description: фильтрует по году
          schema:
            type: integer
      responses:
        200:
          description: Удачное выполнение запроса
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Title'
    post:
      tags:
        - INGREDIENT
      operationId: Добавление произведения
      description: |
        Добавить новое произведение.
        Права доступа: **Администратор**.
        Нельзя добавлять произведения, которые еще не вышли (год выпуска не может быть больше текущего).
        При добавлении нового произведения требуется указать уже существующие категорию и жанр.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleCreate'
      responses:
        201:
          description: Удачное выполнение запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        400:
          description: 'Отсутствует обязательное поле или оно некорректно'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Необходим JWT-токен
        403:
          description: Нет прав доступа
      security:
      - jwt-token:
        - write:admin
  /titles/{titles_id}/:
    parameters:
      - name: titles_id
        in: path
        required: true
        description: ID объекта
        schema:
          type: integer
    get:
      tags:
        - TITLES
      operationId: Получение информации о произведении
      description: |
        Информация о произведении
        Права доступа: **Доступно без токена**
      responses:
        200:
          description: Удачное выполнение запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        404:
          description: Объект не найден
    patch:
      tags:
        - INGREDIENT
      operationId: Частичное обновление информации о произведении
      description: |
        Обновить информацию о произведении
        Права доступа: **Администратор**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleCreate'
      responses:
        200:
          description: Удачное выполнение запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        401:
          description: Необходим JWT-токен
        403:
          description: Нет прав доступа
        404:
          description: Объект не найден
      security:
      - jwt-token:
        - write:admin
    delete:
      tags:
        - INGREDIENT
      operationId: Удаление произведения
      description: |
        Удалить произведение.
        Права доступа: **Администратор**.
      responses:
        204:
          description: 'Удачное выполнение запроса'
        401:
          description: Необходим JWT-токен
        403:
          description: Нет прав доступа
        404:
          description: Произведение не найдено
      security:
      - jwt-token:
        - write:admin
>>>>>>> 3ad09ee (dockerfile)
